import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import * as ɵngcc0 from '@angular/core';
var BarcodeScanner = /** @class */ (function (_super) {
    tslib_1.__extends(BarcodeScanner, _super);
    function BarcodeScanner() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.Encode = {
            TEXT_TYPE: 'TEXT_TYPE',
            EMAIL_TYPE: 'EMAIL_TYPE',
            PHONE_TYPE: 'PHONE_TYPE',
            SMS_TYPE: 'SMS_TYPE'
        };
        return _this;
    }
    BarcodeScanner.prototype.scan = function (options) { return cordova(this, "scan", { "callbackOrder": "reverse" }, arguments); };
    BarcodeScanner.prototype.encode = function (type, data) { return cordova(this, "encode", {}, arguments); };
    BarcodeScanner.pluginName = "BarcodeScanner";
    BarcodeScanner.plugin = "phonegap-plugin-barcodescanner";
    BarcodeScanner.pluginRef = "cordova.plugins.barcodeScanner";
    BarcodeScanner.repo = "https://github.com/phonegap/phonegap-plugin-barcodescanner";
    BarcodeScanner.platforms = ["Android", "BlackBerry 10", "Browser", "iOS", "Windows"];
BarcodeScanner.ɵfac = function BarcodeScanner_Factory(t) { return ɵBarcodeScanner_BaseFactory(t || BarcodeScanner); };
BarcodeScanner.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: BarcodeScanner, factory: function (t) { return BarcodeScanner.ɵfac(t); } });
var ɵBarcodeScanner_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(BarcodeScanner);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(BarcodeScanner, [{
        type: Injectable
    }], null, null); })();
    return BarcodeScanner;
}(IonicNativePlugin));
export { BarcodeScanner };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3VzZXIvRG9jdW1lbnRzL2lvbmljL2JhcmNvZGUtaW5qL25vZGVfbW9kdWxlcy9AaW9uaWMtbmF0aXZlL2JhcmNvZGUtc2Nhbm5lci9uZ3gvaW5kZXguanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFHQTs7Ozs7Ozs7Ozs7Ozs7Ozs7O3lGQWtCeUY7Ozs7OzswQkFHbEUiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSW9uaWNOYXRpdmVQbHVnaW4sIGNvcmRvdmEgfSBmcm9tICdAaW9uaWMtbmF0aXZlL2NvcmUnO1xudmFyIEJhcmNvZGVTY2FubmVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKEJhcmNvZGVTY2FubmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEJhcmNvZGVTY2FubmVyKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuRW5jb2RlID0ge1xuICAgICAgICAgICAgVEVYVF9UWVBFOiAnVEVYVF9UWVBFJyxcbiAgICAgICAgICAgIEVNQUlMX1RZUEU6ICdFTUFJTF9UWVBFJyxcbiAgICAgICAgICAgIFBIT05FX1RZUEU6ICdQSE9ORV9UWVBFJyxcbiAgICAgICAgICAgIFNNU19UWVBFOiAnU01TX1RZUEUnXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgQmFyY29kZVNjYW5uZXIucHJvdG90eXBlLnNjYW4gPSBmdW5jdGlvbiAob3B0aW9ucykgeyByZXR1cm4gY29yZG92YSh0aGlzLCBcInNjYW5cIiwgeyBcImNhbGxiYWNrT3JkZXJcIjogXCJyZXZlcnNlXCIgfSwgYXJndW1lbnRzKTsgfTtcbiAgICBCYXJjb2RlU2Nhbm5lci5wcm90b3R5cGUuZW5jb2RlID0gZnVuY3Rpb24gKHR5cGUsIGRhdGEpIHsgcmV0dXJuIGNvcmRvdmEodGhpcywgXCJlbmNvZGVcIiwge30sIGFyZ3VtZW50cyk7IH07XG4gICAgQmFyY29kZVNjYW5uZXIucGx1Z2luTmFtZSA9IFwiQmFyY29kZVNjYW5uZXJcIjtcbiAgICBCYXJjb2RlU2Nhbm5lci5wbHVnaW4gPSBcInBob25lZ2FwLXBsdWdpbi1iYXJjb2Rlc2Nhbm5lclwiO1xuICAgIEJhcmNvZGVTY2FubmVyLnBsdWdpblJlZiA9IFwiY29yZG92YS5wbHVnaW5zLmJhcmNvZGVTY2FubmVyXCI7XG4gICAgQmFyY29kZVNjYW5uZXIucmVwbyA9IFwiaHR0cHM6Ly9naXRodWIuY29tL3Bob25lZ2FwL3Bob25lZ2FwLXBsdWdpbi1iYXJjb2Rlc2Nhbm5lclwiO1xuICAgIEJhcmNvZGVTY2FubmVyLnBsYXRmb3JtcyA9IFtcIkFuZHJvaWRcIiwgXCJCbGFja0JlcnJ5IDEwXCIsIFwiQnJvd3NlclwiLCBcImlPU1wiLCBcIldpbmRvd3NcIl07XG4gICAgQmFyY29kZVNjYW5uZXIgPSB0c2xpYl8xLl9fZGVjb3JhdGUoW1xuICAgICAgICBJbmplY3RhYmxlKClcbiAgICBdLCBCYXJjb2RlU2Nhbm5lcik7XG4gICAgcmV0dXJuIEJhcmNvZGVTY2FubmVyO1xufShJb25pY05hdGl2ZVBsdWdpbikpO1xuZXhwb3J0IHsgQmFyY29kZVNjYW5uZXIgfTtcbiJdfQ==